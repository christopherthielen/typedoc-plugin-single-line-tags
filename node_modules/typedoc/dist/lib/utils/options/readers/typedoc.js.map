{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/typedoc.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,2BAA6B;AAC7B,uBAAyB;AACzB,0BAA4B;AAE5B,6CAAoD;AACpD,sCAA8E;AAC9E,8CAA8D;AAG9D;IAAmC,iCAAgB;IAAnD;;IAuEA,CAAC;sBAvEY,aAAa;IActB,kCAAU,GAAV;QACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,uBAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;IAC7E,CAAC;IAED,kCAAU,GAAV,UAAW,KAAoB;QAE3B,IAAI,KAAK,CAAC,IAAI,KAAK,yBAAe,CAAC,KAAK,EAAE;YACtC,OAAO;SACV;QAED,IAAI,eAAa,CAAC,WAAW,IAAI,KAAK,CAAC,IAAI,EAAE;YACzC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,eAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SACzE;aAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YAC/B,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACxC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACrB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aAC1B;SACJ;IACL,CAAC;IAUD,4BAAI,GAAJ,UAAK,KAAoB,EAAE,UAAkB;QACzC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YAC5B,KAAK,CAAC,QAAQ,CAAC,oCAAoC,EAAE,UAAU,CAAC,CAAC;YACjE,OAAO;SACV;QAED,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/B,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;YAC5B,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,EAAE;YAC7B,KAAK,CAAC,QAAQ,CAAC,sFAAsF,EAAE,UAAU,CAAC,CAAC;SACtH;aAAM;YACH,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,IAAI,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,EAAE;oBAC9B,KAAK,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACjC;qBAAM,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;oBAC5B,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC;iBAC/B;qBAAM;oBACH,KAAK,CAAC,QAAQ,CAAC,0EAA0E,EAAE,UAAU,CAAC,CAAC;iBAC1G;gBAED,OAAO,IAAI,CAAC,GAAG,CAAC;aACnB;YAED,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACpC;IACL,CAAC;;IA1Dc,yBAAW,GAAG,SAAS,CAAC;IALvC;QANC,kBAAM,CAAC;YACJ,IAAI,EAAE,eAAa,CAAC,WAAW;YAC/B,IAAI,EAAE,iIAAiI;YACvI,IAAI,EAAE,2BAAa,CAAC,MAAM;YAC1B,IAAI,EAAE,2BAAa,CAAC,IAAI;SAC3B,CAAC;kDACc;IAPP,aAAa;QADzB,qBAAS,CAAC,EAAC,IAAI,EAAE,iBAAiB,EAAC,CAAC;OACxB,aAAa,CAuEzB;IAAD,oBAAC;CAAA,AAvED,CAAmC,0BAAgB,GAuElD;AAvEY,sCAAa","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs';\nimport * as _ from 'lodash';\n\nimport { Component, Option } from '../../component';\nimport { OptionsComponent, OptionsReadMode, DiscoverEvent } from '../options';\nimport { ParameterType, ParameterHint } from '../declaration';\n\n@Component({name: 'options:typedoc'})\nexport class TypedocReader extends OptionsComponent {\n    @Option({\n        name: TypedocReader.OPTIONS_KEY,\n        help: 'Specify a js option file that should be loaded. If not specified TypeDoc will look for \\'typedoc.js\\' in the current directory.',\n        type: ParameterType.String,\n        hint: ParameterHint.File\n    })\n    options: string;\n\n    /**\n     * The name of the parameter that specifies the options file.\n     */\n    private static OPTIONS_KEY = 'options';\n\n    initialize() {\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -150);\n    }\n\n    onDiscover(event: DiscoverEvent) {\n        // Do nothing until were fetching options\n        if (event.mode !== OptionsReadMode.Fetch) {\n            return;\n        }\n\n        if (TypedocReader.OPTIONS_KEY in event.data) {\n            this.load(event, Path.resolve(event.data[TypedocReader.OPTIONS_KEY]));\n        } else if (this.application.isCLI) {\n            const file = Path.resolve('typedoc.js');\n            if (FS.existsSync(file)) {\n                this.load(event, file);\n            }\n        }\n    }\n\n    /**\n     * Load the specified option file.\n     *\n     * @param optionFile  The absolute path and file name of the option file.\n     * @param ignoreUnknownArgs  Should unknown arguments be ignored? If so the parser\n     *   will simply skip all unknown arguments.\n     * @returns TRUE on success, otherwise FALSE.\n     */\n    load(event: DiscoverEvent, optionFile: string) {\n        if (!FS.existsSync(optionFile)) {\n            event.addError('The option file %s does not exist.', optionFile);\n            return;\n        }\n\n        let data = require(optionFile);\n        if (typeof data === 'function') {\n            data = data(this.application);\n        }\n\n        if (!(typeof data === 'object')) {\n            event.addError('The option file %s could not be read, it must either export a function or an object.', optionFile);\n        } else {\n            if (data.src) {\n                if (typeof data.src === 'string') {\n                    event.inputFiles = [data.src];\n                } else if (_.isArray(data.src)) {\n                    event.inputFiles = data.src;\n                } else {\n                    event.addError('The property \\'src\\' of the option file %s must be a string or an array.', optionFile);\n                }\n\n                delete data.src;\n            }\n\n            _.defaultsDeep(event.data, data);\n        }\n    }\n}\n"]}