{"version":3,"file":"class.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/class.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { Reflection, ReflectionFlag, ReflectionKind, DeclarationReflection } from '../../models/index';\nimport { createDeclaration } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:class'})\nexport class ClassConverter extends ConverterNodeComponent<ts.ClassDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.ClassExpression,\n        ts.SyntaxKind.ClassDeclaration\n    ];\n\n    /**\n     * Analyze the given class declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The class declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.ClassDeclaration): Reflection {\n        let reflection: DeclarationReflection;\n        if (context.isInherit && context.inheritParent === node) {\n            reflection = <DeclarationReflection> context.scope;\n        } else {\n            reflection = createDeclaration(context, node, ReflectionKind.Class);\n            // set possible abstract flag here, where node is not the inherited parent\n            if (reflection && node.modifiers && node.modifiers.some( m => m.kind === ts.SyntaxKind.AbstractKeyword )) {\n                reflection.setFlag(ReflectionFlag.Abstract, true);\n            }\n        }\n\n        context.withScope(reflection, node.typeParameters, () => {\n            if (node.members) {\n                node.members.forEach((member) => {\n                    const modifiers = ts.getCombinedModifierFlags(member);\n                    const privateMember = (modifiers & ts.ModifierFlags.Private) > 0;\n                    const protectedMember = (modifiers & ts.ModifierFlags.Protected) > 0;\n                    const exclude = (context.converter.excludePrivate && privateMember)\n                        || (context.converter.excludeProtected && protectedMember);\n\n                    if (!exclude) {\n                        this.owner.convertNode(context, member);\n                    }\n                });\n            }\n\n            const baseType = _ts.getEffectiveBaseTypeNode(node);\n            if (baseType) {\n                const type = context.getTypeAtLocation(baseType);\n                if (!context.isInherit) {\n                    if (!reflection.extendedTypes) {\n                        reflection.extendedTypes = [];\n                    }\n                    reflection.extendedTypes.push(this.owner.convertType(context, baseType, type));\n                }\n\n                if (type && type.symbol) {\n                    type.symbol.declarations.forEach((declaration) => {\n                        context.inherit(declaration, baseType.typeArguments);\n                    });\n                }\n            }\n\n            const implementedTypes = _ts.getClassImplementsHeritageClauseElements(node);\n            if (implementedTypes) {\n                implementedTypes.forEach((implementedType) => {\n                    if (!reflection.implementedTypes) {\n                        reflection.implementedTypes = [];\n                    }\n\n                    reflection.implementedTypes.push(this.owner.convertType(context, implementedType));\n                });\n            }\n        });\n\n        return reflection;\n    }\n}\n"]}