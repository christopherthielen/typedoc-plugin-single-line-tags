{"version":3,"file":"export.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/export.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAuF;AAEvF,4CAAkE;AAGlE;IAAqC,mCAA2C;IADhF;QAAA,qEAgDC;QA3CG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,gBAAgB;SACjC,CAAC;;IAyCN,CAAC;IAvCG,iCAAO,GAAP,UAAQ,OAAgB,EAAE,IAAyB;QAC/C,IAAI,MAAM,GAAc,SAAS,CAAC;QAGlC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE;YACpF,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC1D;aAAM;YACH,IAAI,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;SAC3C;QACD,IAAI,MAAM,IAAI,MAAM,CAAC,YAAY,EAAE;YAC/B,IAAM,SAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAChC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;gBACpC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;oBACrB,OAAO;iBACV;gBACD,IAAM,EAAE,GAAG,SAAO,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1E,IAAI,CAAC,EAAE,EAAE;oBACL,OAAO;iBACV;gBAED,IAAM,UAAU,GAAG,SAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBAC3C,IAAI,IAAI,CAAC,cAAc,IAAI,UAAU,YAAY,6BAAqB,EAAE;oBAC3C,UAAW,CAAC,OAAO,CAAC,sBAAc,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;iBACvF;gBACD,cAAc,CAAC,UAAU,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;SACN;QAED,SAAS,cAAc,CAAC,UAAsB;YAC1C,IAAI,UAAU,YAAY,6BAAqB,EAAE;gBACpB,UAAW,CAAC,OAAO,CAAC,sBAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;aAC/E;YAED,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IA9CQ,eAAe;QAD3B,sBAAS,CAAC,EAAC,IAAI,EAAE,aAAa,EAAC,CAAC;OACpB,eAAe,CA+C3B;IAAD,sBAAC;CAAA,AA/CD,CAAqC,mCAAsB,GA+C1D;AA/CY,0CAAe","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionFlag, DeclarationReflection } from '../../models/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:export'})\nexport class ExportConverter extends ConverterNodeComponent<ts.ExportAssignment> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.ExportAssignment\n    ];\n\n    convert(context: Context, node: ts.ExportAssignment): Reflection {\n        let symbol: ts.Symbol = undefined;\n\n        // default export\n        if (node.symbol && (node.symbol.flags & ts.SymbolFlags.Alias) === ts.SymbolFlags.Alias) {\n            symbol = context.checker.getAliasedSymbol(node.symbol);\n        } else {\n            let type = context.getTypeAtLocation(node.expression);\n            symbol = type ? type.symbol : undefined;\n        }\n        if (symbol && symbol.declarations) {\n            const project = context.project;\n            symbol.declarations.forEach((declaration) => {\n                if (!declaration.symbol) {\n                    return;\n                }\n                const id = project.symbolMapping[context.getSymbolID(declaration.symbol)];\n                if (!id) {\n                    return;\n                }\n\n                const reflection = project.reflections[id];\n                if (node.isExportEquals && reflection instanceof DeclarationReflection) {\n                    (<DeclarationReflection> reflection).setFlag(ReflectionFlag.ExportAssignment, true);\n                }\n                markAsExported(reflection);\n            });\n        }\n\n        function markAsExported(reflection: Reflection) {\n            if (reflection instanceof DeclarationReflection) {\n                (<DeclarationReflection> reflection).setFlag(ReflectionFlag.Exported, true);\n            }\n\n            reflection.traverse(markAsExported);\n        }\n\n        return context.scope;\n    }\n}\n"]}