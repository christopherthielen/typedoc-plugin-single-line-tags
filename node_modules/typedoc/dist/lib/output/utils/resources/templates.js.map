{"version":3,"file":"templates.js","sourceRoot":"","sources":["../../../../../src/lib/output/utils/resources/templates.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,uCAAyC;AAEzC,wCAA6C;AAC7C,iCAAkD;AAElD;IAA8B,4BAAQ;IAAtC;;IAkBA,CAAC;IAfG,8BAAW,GAAX;QACI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,IAAM,GAAG,GAAG,aAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE;gBACpC,aAAa,EAAE,IAAI;aACtB,CAAC,CAAC;SACN;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,yBAAM,GAAN,UAAO,OAAY,EAAE,OAAa;QAC9B,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACpC,OAAO,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IACL,eAAC;AAAD,CAAC,AAlBD,CAA8B,gBAAQ,GAkBrC;AAlBY,4BAAQ;AAoBrB;IAAmC,iCAAuB;IACtD;eACI,kBAAM,QAAQ,EAAE,QAAQ,CAAC;IAC7B,CAAC;IACL,oBAAC;AAAD,CAAC,AAJD,CAAmC,qBAAa,GAI/C;AAJY,sCAAa;AAM1B;IAAkC,gCAAa;IAA/C;QAAA,qEAmCC;QAlCW,qBAAe,GAAa,EAAE,CAAC;;IAkC3C,CAAC;IAhCG,+BAAQ,GAAR;QACI,IAAI,CAAC,iBAAM,QAAQ,WAAE,EAAE;YACnB,OAAO,KAAK,CAAC;SAChB;QACD,IAAM,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAEzC,KAAK,IAAI,MAAI,IAAI,SAAS,EAAE;YACxB,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC3C,SAAS;aACZ;YACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAI,CAAC,CAAC;YAEhC,IAAM,OAAO,GAAG,SAAS,CAAC,MAAI,CAAC,CAAC;YAChC,IAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YACvC,UAAU,CAAC,eAAe,CAAC,MAAI,EAAE,QAAQ,CAAC,CAAC;SAC9C;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,iCAAU,GAAV;QACI,IAAI,CAAC,iBAAM,UAAU,WAAE,EAAE;YACrB,OAAO,KAAK,CAAC;SAChB;QAED,KAAiB,UAAoB,EAApB,KAAA,IAAI,CAAC,eAAe,EAApB,cAAoB,EAApB,IAAoB,EAAE;YAAlC,IAAI,MAAI,SAAA;YACT,UAAU,CAAC,iBAAiB,CAAC,MAAI,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,mBAAC;AAAD,CAAC,AAnCD,CAAkC,aAAa,GAmC9C;AAnCY,oCAAY","sourcesContent":["import * as Handlebars from 'handlebars';\n\nimport { readFile } from '../../../utils/fs';\nimport { ResourceStack, Resource } from './stack';\n\nexport class Template extends Resource {\n    private template: HandlebarsTemplateDelegate;\n\n    getTemplate(): HandlebarsTemplateDelegate {\n        if (!this.template) {\n            const raw = readFile(this.fileName);\n            this.template = Handlebars.compile(raw, {\n                preventIndent: true\n            });\n        }\n\n        return this.template;\n    }\n\n    render(context: any, options?: any): string {\n        const template = this.getTemplate();\n        return template(context, options);\n    }\n}\n\nexport class TemplateStack extends ResourceStack<Template> {\n    constructor() {\n        super(Template, /\\.hbs$/);\n    }\n}\n\nexport class PartialStack extends TemplateStack {\n    private registeredNames: string[] = [];\n\n    activate(): boolean {\n        if (!super.activate()) {\n            return false;\n        }\n        const resources = this.getAllResources();\n\n        for (let name in resources) {\n            if (this.registeredNames.indexOf(name) !== -1) {\n                continue;\n            }\n            this.registeredNames.push(name);\n\n            const partial = resources[name];\n            const template = partial.getTemplate();\n            Handlebars.registerPartial(name, template);\n        }\n\n        return true;\n    }\n\n    deactivate(): boolean {\n        if (!super.deactivate()) {\n            return false;\n        }\n\n        for (let name of this.registeredNames) {\n            Handlebars.unregisterPartial(name);\n        }\n\n        this.registeredNames = [];\n        return true;\n    }\n}\n"]}